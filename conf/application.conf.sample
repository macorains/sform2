# This is the main configuration file for the application.
# ~~~~~

baseUrl="http://localhost:9001"

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.http.secret.key="changeme"

# The application languages
# ~~~~~
play.i18n.langs=["en"]

# Registers the request handler
# ~~~~~
play.http.requestHandler = "play.api.http.DefaultHttpRequestHandler"

# Registers the filters
# ~~~~~
play.http.filters = "net.macolabo.sform2.utils.net.macolabo.sform2.Filters"

play.http.parser.maxMemoryBuffer = 5MB
play.http.parser.maxDiskBuffer = 100MB
parsers.anyContent.maxLength = 100MB

# Session Cookie
play.http.session.maxAge = 1h

# The application DI modules
# ~~~~~
play.modules.enabled += "net.macolabo.sform2.modules.BaseModule"
play.modules.enabled += "net.macolabo.sform2.modules.JobModule"
play.modules.enabled += "net.macolabo.sform2.modules.SecurityModule"
play.modules.enabled += "play.api.libs.mailer.MailerModule"
play.modules.enabled += "net.macolabo.sform2.modules.DBInitializerModule"

# Akka config
akka {
  loglevel = "INFO"
  jvm-exit-on-fatal-error=off

  # Auth token cleaner
  quartz.schedules{
    AuthTokenCleaner {
      expression = "0 0 */1 * * ?"
      timezone = "UTC"
      description = "cleanup the auth tokens on every hour"
    }
    Every5Seconds {
      description = "20秒毎に実行"
      expression = "*/20 * * ? * *"
    }
    MailTransferSendMail {
      description = "20秒毎に実行"
      expression = "*/20 * * ? * *"
    }
  }
}

# Play mailer
play.mailer {
  host = "localhost"
  port = 25
  mock = true
}

# Security Filter Configuration - Content Security Policy
play.filters {
  headers {
    contentSecurityPolicy = "default-src 'self';"
    contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" img-src 'self' *.fbcdn.net *.twimg.com *.googleusercontent.com *.xingassets.com vk.com *.yimg.com secure.gravatar.com;"
    contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" style-src 'self' 'unsafe-inline' cdnjs.cloudflare.com maxcdn.bootstrapcdn.com cdn.jsdelivr.net fonts.googleapis.com;"
    contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" font-src 'self' fonts.gstatic.com fonts.googleapis.com cdnjs.cloudflare.com;"
    contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" script-src 'self' cdnjs.cloudflare.com;"
    contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" connect-src 'self' twitter.com *.xing.com;"
 }
  cors {
    exposedHeaders = ["x-auth-token","X-Auth-Token"]
    pathPrefixes = ["/"]
    allowedOrigins = ["http://localhost:8080"]
    allowedHttpMethods = ["GET", "POST", "OPTIONS", "DELETE"]
    allowedHttpHeaders = ["Accept", "Content-Type", "Access-Control-Allow-Origin", "Origin", "X-Requested-With", "X-Auth-Token", "Timeout"]
    preflightMaxAge = 3 days
  }
  csrf {
    header.bypassHeaders {
      X-Requested-With = "*"
      Csrf-Token = "nocheck"
    }
    bypassCorsTrustedOrigins = false
  }
}

## Evolutions
# https://www.playframework.com/documentation/latest/Evolutions
# ~~~~~
# Evolutions allows database scripts to be automatically run on startup in dev mode
# for database migrations. You must enable this by adding to build.sbt:
#
# libraryDependencies += evolutions
#
play.evolutions {
  # You can disable evolutions for a specific datasource if necessary
  db.default.enabled = true
}

## Database Connection Pool
# https://www.playframework.com/documentation/latest/SettingsJDBC
# ~~~~~
# Play doesn't require a JDBC database to run, but you can easily enable one.
#
# libraryDependencies += jdbc
#
play.db {
  # The combination of these two settings results in "db.default" as the
  # default JDBC pool:
  config = "db"
  default = "default"

  # Play uses HikariCP as the default connection pool.  You can override
  # settings by changing the prototype:
  prototype {
    # Sets a fixed JDBC connection pool size of 50
    #hikaricp.minimumIdle = 50
    #hikaricp.maximumPoolSize = 50
  }
}

## JDBC Datasource
# https://www.playframework.com/documentation/latest/JavaDatabase
# https://www.playframework.com/documentation/latest/ScalaDatabase
# ~~~~~
# Once JDBC datasource is set up, you can work with several different
# database options:
#
# Slick (Scala preferred option): https://www.playframework.com/documentation/latest/PlaySlick
# JPA (Java preferred option): https://playframework.com/documentation/latest/JavaJPA
# EBean: https://playframework.com/documentation/latest/JavaEbean
# Anorm: https://www.playframework.com/documentation/latest/ScalaAnorm
#
db {
  # You can declare as many datasources as you want.
  # By convention, the default datasource is named `default`
  # https://www.playframework.com/documentation/latest/Developing-with-the-H2-Database
  #default.driver = org.h2.Driver
  #default.url = "jdbc:h2:mem:play"
  #default.username = sa
  #default.password = ""
  default.driver=com.mysql.jdbc.Driver
  default.url="jdbc:mysql://127.0.0.1/sform2s_store?useSSL=false&characterEncoding=UTF8"
  default.username=username
  default.password="password"
  default.logStatements=true

  # You can turn on SQL logging for any datasource
  # https://www.playframework.com/documentation/latest/Highlights25#Logging-SQL-statements
  #default.logSql=true
}

include "sform.conf"
